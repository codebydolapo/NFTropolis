import type { NextPage } from "next";
import { ethers } from "ethers";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Navbar from "../components/Navbar";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { nfTropolisAddress } from "../src/nfTropolisAddress";
import nfTropolisABI from "../artifacts/contracts/NFTropolis.sol/NFTropolis.json";
import { marketplaceAddress } from "../src/marketplaceAddress";
import marketplaceABI from "../artifacts/contracts/Marketplace.sol/Marketplace.json";
// import { minterAddress } from '../src/minterAddress'
// import metadata from "../data/data.json";
import { saveNFTData } from "../components/reducers/action";
import { client } from "../sanity/sanity.config";
import Menu from "../components/Menu";
import {
  usePrepareContractWrite,
  useContractWrite,
  useContractRead,
  useAccount,
} from "wagmi";
import getCount from "../components/hooks/useCount";
import MarketplaceBody from "../components/MarketplaceBody";
import toast, { Toaster } from 'react-hot-toast';
import Checkout from "../components/Checkout";
import _fetchData from "../backend/_fetchData";
import { ref, get, child } from "firebase/database";
import { database } from "../backend/_config"
require("dotenv").config()
// Importing the required modules
import {Nft } from "alchemy-sdk"
import sampleData from "../sampleData.json"


const Home = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    let nfts: Nft[] | any = [];
    for (let i = 0; i < Object.keys(sampleData).length; i++) {
      const key: any = Object.keys(sampleData)[i];
      nfts.push(sampleData[key]);
    }
    dispatch(saveNFTData(nfts))
  }, [])

  // useEffect(()=>{
  //   let nfts: any = [];

  //    (async function () {
  //         try {
  //           const response = await fetch("/api/all");
  //           if (!response.ok) {
  //             throw new Error(`Error fetching data: ${response.status}`);
  //           }
  //           const data = await response.json();
  //           console.log(data);
  //           nfts.push(data);
  //         dispatch(saveNFTData(data))
  //         } catch (error) {
  //           console.error(error);
  //         }
  //       })();
  // }, [])

  /////////////////////////////
  ////////////////////////////
  ///////////////////////////


  //going to write another function on top of this
  //thif function will be for testing purposes
  //delete the upon final deployment, and reinstate this
  // useEffect(() => {



  //   const dbRef = ref(database);


  //   let nfts: any = [];
  //   (async function () {
  //     get(child(dbRef, `Listings/`)).then(async (snapshot) => {
  //       if (snapshot.exists()) {
  //         console.log(snapshot.val());
  //         //returns the collected data in array format
  //         for (let i = 0; i < Object.keys(snapshot.val()).length; i++) {
  //           const key = Object.keys(snapshot.val())[i];
  //           nfts.push(snapshot.val()[key]);
  //         }
  //         // Configuring Alchemy SDK with your API key and network
  //         const settings: AlchemySettings | any = {
  //           apiKey: process.env.ALCHEMY_API_KEY, // Replace with your Alchemy API Key.
  //           network: Network.MATIC_MUMBAI
  //         };

  //         // Creating an Alchemy instance to make calls to the Alchemy API
  //         const alchemy = new Alchemy(settings);

  //         const responses = [];

  //         for (let i: any = 0; i < nfts.length; i++) {
  //           // Making a call to the Alchemy API to get the metadata
  //           const response = await alchemy.nft.getNftMetadata(
  //             nfts[i].address.toString(),
  //             nfts[i].tokenId
  //           );
  //           responses.push(response);
  //         };
  //         console.log(responses)
  //         dispatch(saveNFTData(responses))
  //       } else {
  //         console.log("No data available");
  //       }
  //     }).catch((error) => {
  //       console.error(error);
  //     });
  //   })()
  // }, []);

  const checkoutPopupState = useSelector(
    (state: { checkoutPopupState: boolean }) => {
      return state.checkoutPopupState;
    }
  );



  return (
    <div className={`font-montserrat ${styles.container} `}>
      <Head>
        <title>NFTropolis</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      {!checkoutPopupState && <MarketplaceBody />}
      {checkoutPopupState && <Checkout />}
      <Menu />
      <Toaster
        position="bottom-right"
        reverseOrder={false}
        gutter={8}
      />
    </div>
  );
};

export default Home;

// export async function getServerSideProps() {
// let data


//   try {
//   const response = await fetch("/api/1");
//   if (!response.ok) {
//     throw new Error(`Error fetching data: ${response.status}`);
//   }
//   data = await response.json();
//   console.log(data);
// } catch (error) {
//   console.error(error);
// }

//   return {
//     props: data
//   };
// }
// //https://nftstorage.link/ipfs/bafybeigvgzoolc3drupxhlevdp2ugqcrbcsqfmcek2zxiw5wctk3xjpjwy/amazing.gif
