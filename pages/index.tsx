import type { NextPage } from "next";
import { ethers } from "ethers";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Navbar from "../components/Navbar";
import Landing from "../components/Landing";
import { useEffect, useState } from "react";
import { saveMarketplaceContract } from "../components/reducers/action";
import { useDispatch, useSelector } from "react-redux";
import { nfTropolisAddress } from "../src/nfTropolisAddress";
import nfTropolisABI from "../artifacts/contracts/NFTropolis.sol/NFTropolis.json";
// import minterABI from "../artifacts/contracts/Minter.sol/Minter.json";
// import { minterAddress } from '../src/minterAddress'
import metadata from "../data/data.json";
import { saveNFTData, saveWindow } from "../components/reducers/action";
import { client } from "../sanity/sanity.config";

const Home: NextPage = ({ nfts }: any) => {
  const [_effectState, setEffectState] = useState(true);
  let Window: any;
  const dispatch = useDispatch();

  // let dataArray: any[] = [];

  useEffect(() => {
    Window = (window as any).ethereum;
    console.log(nfts);
  }, []);

  const startUp = async () => {
    if (!Window) {
      alert("Please install MetaMask!");
      return;
    }

    const provider = new ethers.providers.Web3Provider(Window);
    const signer = provider.getSigner();

    const nfTropolis = new ethers.Contract(
      nfTropolisAddress,
      nfTropolisABI.abi,
      // provider
      signer
    );

    const nfTropolisSigner = new ethers.Contract(
      nfTropolisAddress,
      nfTropolisABI.abi,
      // provider
      signer
    );

    console.log(nfTropolis);

    // for (let i = 1; i <= metadata.length; i++) {
    //   if (_effectState) {
    //     const response = await nfTropolis.tokenURI(i);
    //     const rawData = await fetch(response);
    //     const data: any = await rawData.json();
    //     const isOwned = await nfTropolis.isOwned(i);
    //     data.isOwned = isOwned;
    //     dataArray.push(data);
    //   }
    // }

    dispatch(saveNFTData(nfts));
    dispatch(saveNFTData(nfts));
    dispatch(saveMarketplaceContract(nfTropolis));

    setEffectState(false);

    // console.log(dataArray)

    dispatch(saveWindow(Window));
  };

  useEffect(() => {
    startUp();
    setEffectState(false);
  }, []);

  return (
    <div className={`font-montserrat ${styles.container}`}>
      <Head>
        <title>Enefti</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Landing />
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const propertyQuery = `*[_type == "mintedNFTs"][]{
    image,
    url{
    current
    },
  name,
    description[0]{
    children[0]{
      text
    }
    },
  price
  }`;

  //`https://zpwvjwqc.api.sanity.io/v2021-10-21/data/query/production?query=*%5B_type%20%3D%3D%20%22property%22%5D%5B${"tokenId"}%5D`

  const nfts: Metadata | undefined = await client.fetch(propertyQuery);

  // const metadata = {
  //   name: nfts?.name,
  //   image: nfts?.image,
  //   description: nfts?.description,
  //   external_url: nfts?.external_url
  // };

  return {
    props: {
      nfts,
      // name: nfts?.name,
      // image: nfts?.image,
      // description: nfts?.description,
    },
  };
}
//https://nftstorage.link/ipfs/bafybeigvgzoolc3drupxhlevdp2ugqcrbcsqfmcek2zxiw5wctk3xjpjwy/amazing.gif
